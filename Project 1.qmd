---
title: "Project 1"
author: "Zach Ginder and Makenna Meyer"
format: pdf
editor: visual
---

```{r, warnings=FALSE}
#Load in libraries
library(tidyverse)
```

## Data Reading

```{r}
census_2010<- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")

sectiontwo <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")

testdata_a <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv")

testdata_b <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv")

testdata_c <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv")

testdata_d <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv")
```

## Data Processing

## Step 1: Column Selection

```{r}
#Without function
census_2010_q1 <- census_2010 |>
  select(Area_name, STCOU, ends_with("D"))
```

## Step 2: Long Format Conversion

```{r}
#Without function
census_2010_q2 <- census_2010_q1 |>
  pivot_longer(cols = c(ends_with("D")),
               names_to = "SurveyYear",
               values_to = "Enrollment")
```

```{r}
#With function

#Function that does question 1 and 2
long_conversion < -function(tibble, value="values for enrollment"){
  long_format<- tibble |>
    select(Area_name, STCOU, ends_with("D"))|>
    rename(area_name = Area_name)|>
    pivot_longer(cols = ends_with("D"), names_to = "surveys")
  return(long_format)
}
```

## Step 3: Adding Variables for Survey, Year, and Measurement

```{r}
#Without function
census_2010_q3 <- census_2010_q2 |>
  mutate(Survey = substr(SurveyYear, 1, 3)) |>
  mutate(Measurement = substr(SurveyYear, 1, 7)) |>
  mutate(year_short = as.numeric(substr(SurveyYear, 8, 9))) |>
  mutate(Year = ifelse(year_short <= 25, year_short + 2000, year_short + 1900))
```

```{r}
#With function

#Function that does question 3
surveys_year_measurements <- function(tibble){
  long_updated <- tibble |>
  mutate(years = as.numeric(substr(surveys,8,9))) |>
  mutate(years = ifelse(years <= 25 & years >= 0, years + 2000, years + 1900)) |>
  mutate(measurements = substr(surveys, 1, 7))
  return(long_updated)
}
```


## Step 4: Creating Two Data Sets

```{r}
#Without function
indices <- grep(pattern = ", \\w\\w", census_2010_q3$Area_name)

county <- census_2010_q3[indices,]
class(county) <- c("county", class(county))

non_county <- census_2010_q3[-c(indices),]
class(non_county) <- c("state", class(non_county))
```

## Step 5: Creating State Variable for County Tibble

```{r}
#Without function
county_q5 <- county |>
  mutate(state = substr(Area_name, (nchar(Area_name) - 1), nchar(Area_name)))
```


```{r}
#With function

#Function to perform step 5
adding_state_to_county <- function(county_tibble){
  county_w_state <- county_tibble |>
    mutate(state = substr(Area_name, (nchar(Area_name) - 1), nchar(Area_name)))
  return(county_w_state)
}
```

## Step 6: Creating Division Variable for Non-County Tibble

```{r}
#Without function
non_county_q6 <- non_county |>
  mutate(division = 
           case_when(Area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE",
                                      "RHODE ISLAND", "VERMONT") ~ "New England",
                     Area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Mid-Atlantic",
                     Area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") 
                     ~ "East North Central",
                     Area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", 
                                      "NORTH DAKOTA", "SOUTH DAKOTA") ~ "West North Central",
                     Area_name %in% c("DELAWARE", "District of Columbia", "DISTRICT OF COLUMBIA",
                                      "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", 
                                      "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") ~ "South Atlantic",
                     Area_name %in% c("KENTUCKY", "TENNESSEE", "MISSISSIPPI", "ALABAMA")
                     ~ "East South Central",
                     Area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS")
                     ~ "West South Central", 
                     Area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA",
                                      "NEW MEXICO", "UTAH", "WYOMING") ~ "Mountain",
                     Area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON")
                     ~ "Pacific",
                     TRUE ~ "ERROR"))
```


```{r}
#With function

#Function to perform step 6
adding_division_to_noncounty <- function(noncounty_tibble){
  noncounty_w_division <- noncounty_tibble |>
    mutate(division = 
           case_when(Area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE",
                                      "RHODE ISLAND", "VERMONT") ~ "New England",
                     Area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Mid-Atlantic",
                     Area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") 
                     ~ "East North Central",
                     Area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", 
                                      "NORTH DAKOTA", "SOUTH DAKOTA") ~ "West North Central",
                     Area_name %in% c("DELAWARE", "District of Columbia", "DISTRICT OF COLUMBIA",
                                      "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", 
                                      "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") ~ "South Atlantic",
                     Area_name %in% c("KENTUCKY", "TENNESSEE", "MISSISSIPPI", "ALABAMA")
                     ~ "East South Central",
                     Area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS")
                     ~ "West South Central", 
                     Area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA",
                                      "NEW MEXICO", "UTAH", "WYOMING") ~ "Mountain",
                     Area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON")
                     ~ "Pacific",
                     TRUE ~ "ERROR"))
  return(noncounty_w_division)
}
```

```{r}
#Writing function that uses Step 3 output and performs Steps 4, 5, and 6

creating2tibbles_addingstateordivision <- function(long_updated){
  indices <- grep(pattern = ", \\w\\w", long_updated$Area_name)
  county_tibble <- long_updated[indices,]
  class(county_tibble) <- c("county", class(county_tibble))
  
  noncounty_tibble <- long_updated[-c(indices),]
  class(noncounty_tibble) <- c("state", class(noncounty_tibble))
  
  county_state_final <- adding_state_to_county(county_tibble)
  noncounty_division_final <- adding_division_to_noncounty(noncounty_tibble)
  
  return(county_state_final)
  return(noncounty_division_final)
}
```

## Generic Function for Summarizing

```{r}
#Run these in your console
plot.function #what is used for a class = function
```

```{r}
getS3method("plot","data.frame") #what is used for a class = data frame
```

```{r}
plot
```

```{r}
plot.state <- function(df, var_name = "_your_default_value_"){
#code to find the means for each division and year (think tidyverse)
#Use get(var_name) to reference the var_name in your call to mean(): mean(get(var_name))
#For this, think group_by along with summarize
#remove the "ERROR" setting
#create a line plot with ggplot with appropriate aes() assignments
}
```

```{r}
plot(_class_state_df_here_, var_name = ...).
```
